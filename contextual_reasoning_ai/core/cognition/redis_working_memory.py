import os
import json
import redis
from datetime import datetime


class RedisWorkingMemory:
    """
    Redis-backed Working Memory for Contextual Cognitive Reasoning AI.
    Handles short-term, real-time state management.
    """

    def __init__(self):
        # Connect to Redis using environment variables
        self.redis_client = redis.StrictRedis(
            host=os.getenv("REDIS_HOST", "localhost"),
            port=int(os.getenv("REDIS_PORT", 6379)),
            decode_responses=True
        )

    # -------------------------
    # Core Context Operations
    # -------------------------
    def set_context(self, context: dict):
        """Store the current reasoning context as a JSON blob."""
        self.redis_client.set("wm:context", json.dumps(context))

    def get_context(self) -> dict:
        """Retrieve the current reasoning context."""
        data = self.redis_client.get("wm:context")
        return json.loads(data) if data else {}

    def clear_context(self):
        """Clear the current working context."""
        self.redis_client.delete("wm:context")

    # -------------------------
    # Task Management
    # -------------------------
    def add_task(self, task: dict):
        """Add a task to the working memory task queue."""
        self.redis_client.lpush("wm:tasks", json.dumps(task))

    def get_next_task(self) -> dict:
        """Pop the next task from the queue."""
        task = self.redis_client.rpop("wm:tasks")
        return json.loads(task) if task else None

    def get_all_tasks(self) -> list:
        """Get all tasks without removing them."""
        tasks = self.redis_client.lrange("wm:tasks", 0, -1)
        return [json.loads(t) for t in tasks]

    def clear_tasks(self):
        """Clear all tasks."""
        self.redis_client.delete("wm:tasks")

    # -------------------------
    # Perception Handling
    # -------------------------
    def store_perception(self, session_id: str, perception: dict):
        """Store latest perception data for a session."""
        key = f"wm:perceptions:{session_id}"
        self.redis_client.set(key, json.dumps(perception))

    def get_perception(self, session_id: str) -> dict:
        """Retrieve perception data for a session."""
        key = f"wm:perceptions:{session_id}"
        data = self.redis_client.get(key)
        return json.loads(data) if data else {}

    # -------------------------
    # Decision Outputs
    # -------------------------
    def store_decision(self, session_id: str, decision: dict):
        """Store a decision generated by the cognitive engine."""
        key = f"wm:decisions:{session_id}"
        self.redis_client.set(key, json.dumps(decision))

    def get_decision(self, session_id: str) -> dict:
        """Retrieve the last decision for a session."""
        key = f"wm:decisions:{session_id}"
        data = self.redis_client.get(key)
        return json.loads(data) if data else {}

    # -------------------------
    # Heartbeat
    # -------------------------
    def update_heartbeat(self):
        """Update a heartbeat timestamp to indicate the system is alive."""
        timestamp = datetime.utcnow().isoformat()
        self.redis_client.set("wm:heartbeat", timestamp)
        return timestamp

    def get_heartbeat(self) -> str:
        """Get the last heartbeat timestamp."""
        return self.redis_client.get("wm:heartbeat")

    # -------------------------
    # Debugging Helpers
    # -------------------------
    def debug_print_state(self):
        """Prints current WM state for debugging purposes."""
        print("Context:", self.get_context())
        print("Tasks:", self.get_all_tasks())
        print("Heartbeat:", self.get_heartbeat())
